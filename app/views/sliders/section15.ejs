<section>
    <section>
        <h2>10. Real-Time With Socket.IO</h2>
    </section>
    
    <section>
        <h2>Socket.IO</h2>
        <pre><code class="language-shell" data-trim>
            npm install socket.io --save
        </code></pre>
        <img src="/images/10-socket.io/bidirectional-communication.png">

        <small>ทำงานโดยใช้ WebSocket หรือ HTTP long-polling</small>
    </section>

    

    <section>
        <h2>Server Side</h2>
        <pre><code class="language-js" data-trim>
            const express = require('express')
            const http = require('http');
            const app = express()
            const { Server } = require("socket.io");
            
            const server = http.createServer(app);
            const io = new Server(server);

            io.on('connection', (socket) => {
                console.log('a user connected');
    
                // Event on client
                socket.on('sendMessage', (data) => {
                    console.log(data)
                });
    
                // Client is Disconnect
                socket.on('disconnect', () => {
                    console.log("disconnect")
                });

            });

            app.get('/', function (req, res) {
                res.send('GET request to the homepage')
            })

            server.listen(port, () => {
                console.log(`Example app listening on http://localhost:${port}`)
            })
        </code></pre>
    </section>

    <section>
        <h2>Client Side</h2>
        <pre><code class="language-html" data-trim>
            <script src="https://cdnjs.cloudflare.com/ajax/libs/socket.io/4.4.1/socket.io.js"></script>
            <script>
                var socket = io("http://localhost:3000");

                // on receive event message on server
                socket.on("message", function(data){
                    console.log("message", data)
                })

                socket.on("alert", function(data){
                    console.log("alert", data)
                })

                function sendMessage(data){
                    socket.emit("sendMessage", data)
                }
            </script>
        </code></pre>
    </section>

    <section>
        <h2>Emitting events</h2>
        <pre><code class="language-js" data-trim>
            // server-side
            io.on("connection", (socket) => {
                socket.emit("hello", "world");
            });

            // client-side
            socket.on("hello", (arg) => {
                console.log(arg); // world
            });
        </code></pre>
        <pre><code class="language-js" data-trim>
            // server-side
            io.on("connection", (socket) => {
                socket.on("hello", (arg) => {
                    console.log(arg); // world
                });
            });

            // client-side
            socket.emit("hello", "world");
        </code></pre>
    </section>

    <section>
        <h2>Emitting events</h2>
        <pre><code class="language-js" data-trim>
            // BAD
            socket.emit("hello", JSON.stringify({ name: "John" }));

            // GOOD
            socket.emit("hello", { name: "John" });
        </code></pre>
    </section>

    <section>
        <h2>Broadcasting events</h2>
        <img src="https://socket.io/images/broadcasting.png">
        <pre><code class="language-js" data-trim>
            io.emit("hello", "world");
        </code></pre>
    </section>

    <section>
        <h2>Rooms</h2>
        <img src="https://socket.io/images/rooms.png">
        <pre><code class="language-js" data-trim>
            io.on("connection", (socket) => {
                socket.join("some room");
            });
        </code></pre>
        <pre><code class="language-js" data-trim>
            io.to("some room").emit("some event");
        </code></pre>
    </section>

    <section>
        <h2>Sample use cases</h2>
        <pre><code class="language-js" data-trim>
            io.on("connection", async (socket) => {
                const userId = await fetchUserId(socket);
              
                socket.join(userId);
              
                // and then later
                io.to(userId).emit("hi");
            });
        </code></pre>
    </section>


</section>